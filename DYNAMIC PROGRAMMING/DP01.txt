NORMAL RECURSION

int fib(int n){
    if (n<=1){
        return n;
    }
    return fib(n-1)+fib(n-2);
}
---------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
MEMOIZATION

int fibmemo(int n, vector<int>& memo ){  // & for reference so no new copies created and original memo modified
    if (n<=1){
        return n;
    }
    if (memo[n] != -1){
        return memo[n];
    }

    memo[n] = fibmemo(n-1,memo) + fibmemo(n-2,memo); // no need to write & here as CPP recognizes by signature
    return memo[n];
}
---------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
TABULATION

int fibtab(int n){
    if (n<=1){
        return n;
    }

    vector<int> tab(n+1);
    tab[0] = 0;
    tab[1] = 1;

    for (int i = 2; i<= n; i++){
        tab[i] = tab[i-1] + tab[i-2];
    }

    return tab[n];
    
}
---------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
TABULATION OPTIMIZATION: Instead of whole table storage, we only store curr, prev1 and prev2 and then at end return prev1

int fibtab(int n){
    if (n<=1){
        return n;
    }

    prev2 = 0;
    prev1 = 1;

    for (int i = 2; i<= n; i++){
        curr = prev1 + prev2;  // we calculate current
        prev2 = prev1;         // we shift by 1
        prev1 = curr;          // we shift by 1
    }

    return prev1;
    
}
